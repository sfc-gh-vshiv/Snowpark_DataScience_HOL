schemaVersion: 3
meta:
  sourceVersionId: 2388247f-bcab-489e-aa16-bc822f2d2a42 # DO NOT CHANGE - Hex uses this to match up project versions when reimporting the file
  description: This is a Snowflake Tasty Bytes extension vignette which showcases new Snowpark ML API and Model Registry features.
  projectId: af33a773-e4ab-4b05-9329-3062be0c285f # DO NOT CHANGE - Unique ID of the project from which this file was generated
  title: End-to-End Data Science using Snowpark - Presenter
  timezone: null
  appTheme: SYS_PREF
  codeLanguage: PYTHON
  status:
    name: In Progress
  categories: []
  castDecimalsDefault: true
  logicQueryCacheTimeout: null
  publishedQueryCacheTimeout: null
  hexType: PROJECT
projectAssets:
  dataConnections:
    - dataConnectionId: 900eaa91-e8d2-4a16-9080-4c5ff1c8d534 # Example_HOL (snowflake)
  envVars: []
  secrets: []
sharedAssets:
  secrets: []
  vcsPackages: []
  dataConnections: []
  externalFileIntegrations: []
cells:
  - cellType: TEXT
    cellId: 32484465-4559-4943-84ef-132703c3ffb6 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h1
          children:
            - text: "Overview: Flow of Snowpark ML API / MLOps Hands-on-Lab"
        - type: p
          children:
            - text: ""
            - src: /api/v1/file/59015e09-9e3b-4282-967f-ba2047831d4d
              type: image
              width: 600
              children:
                - text: ""
            - text: ""
  - cellType: TEXT
    cellId: 87fe90a5-7dfd-4c11-a9a8-523585b7bb54 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h2
          children:
            - text: Background Information
        - type: p
          children:
            - text: Tasty Bytes is one of the largest food truck networks in the world with localized menu options spread across 30 major cities in 15 countries. 
            - bold: true
              text: Tasty Bytes is aiming to achieve 25% YoY sales growth over 5 years.
        - type: p
          children:
            - text: As Tasty Bytes Data Scientists, we have been asked to support this goal by helping our food truck drivers more intelligently pick where to park for shifts. 
        - type: p
          children:
            - bold: true
              text: |-
                We want to direct our trucks to locations that are expected to have the highest sales on a given shift.
                This will maximize our daily revenue across our fleet of trucks.
        - type: p
          children:
            - text: To provide this insight, we will use historical shift sales at each location to build a model. This data has been made available to us in Snowflake.Our model will provide the predicted sales at each location for the upcoming shift.
  - cellType: TEXT
    cellId: 9f5e716c-668f-4236-84f4-93cb8bf5286e # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - text: ""
            - src: /api/v1/file/1af4060e-6e38-46d9-9d81-6fdca74d0562
              type: image
              width: 600
              children:
                - text: ""
            - text: ""
  - cellType: TEXT
    cellId: 65a763bd-dfef-4779-9742-cbff770c3f57 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - text: ""
  - cellType: TEXT
    cellId: 0433f079-da01-469a-9a13-b1780ddf1cf8 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h2
          children:
            - text: Import Packages
        - type: p
          children:
            - text: |
                Just like the Python packages we are importing, we will import the Snowpark modules that we need.
            - bold: true
              text: Value
            - text: ": Snowflake modules provide efficient ways to work with data and functions in Snowflake."
  - cellType: CODE
    cellId: f700914e-141c-489b-a45a-b3407ee6184d # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Libraries
    config:
      source: |-
        # Import Packages
        import pandas as pd
        import plotly.express as px
        import plotly.io as pio
        import json
        import sys
        import cachetools
        import getpass

        # Import Snowflake modules
        from snowflake.snowpark import Session
        import snowflake.snowpark.functions as F
        import snowflake.snowpark.types as T
        from snowflake.snowpark import Window
  - cellType: TEXT
    cellId: ad14607d-ee33-4369-b8a0-f599c4c0c21d # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h4
          children:
            - text: Need to update snowflake-ml-python package to version 1.2.2 to reflect PuPr Model Registry syntax
  - cellType: CODE
    cellId: 4c272555-8df9-47b4-b137-bbd0a942a36d # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: "!pip install snowflake-ml-python==1.2.2"
  - cellType: TEXT
    cellId: f7a060e7-05fe-4710-b20b-01c2692f4413 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h2
          children:
            - text: Connect to Snowflake
        - type: p
          children:
            - text: Our assigned HOL Snowflake role, 
            - code: true
              text: <ROLEXXX>
            - text: ", can access the data in your assigned "
            - code: true
              text: <SCHEMAXXX>
            - text:  of the HOL database. We will use your assigned 
            - code: true
              text: <WHXXX>
            - text:  warehouse that has been created as a dedicated compute for data science workloads.We will use these parameters and our Snowflake account credentials to connect to Snowflake and create a Snowpark session. 
        - type: p
          children:
            - bold: true
              text: "Value:"
            - text:  Secure and governed.
  - cellType: TEXT
    cellId: 33433393-02b4-4035-88c5-a00d6347da7a # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h2
          children:
            - text: Create your Snowflake data connection called "HOL
            - code: true
              text: xxx
            - text: '"'
        - type: p
          children:
            - text: If you were assigned user
            - code: true
              text: xxx
            - text: ","
        - type: ul
          children:
            - type: li
              children:
                - type: lic
                  children:
                    - text: set Name as HOL
                    - code: true
                      text: xxx
            - type: li
              children:
                - type: lic
                  children:
                    - text: set Account as XXX-XXX,
            - type: li
              children:
                - type: lic
                  children:
                    - text: set Warehouse WH
                    - code: true
                      text: xxx
                    - text: ","
            - type: li
              children:
                - type: lic
                  children:
                    - text: set Database as HOL,
            - type: li
              children:
                - type: lic
                  children:
                    - text: set Schemas as SCHEMA
                    - code: true
                      text: xxx
                    - text: ","
            - type: li
              children:
                - type: lic
                  children:
                    - text: set Username as USER
                    - code: true
                      text: xxx
                    - text: ","
            - type: li
              children:
                - type: lic
                  children:
                    - text: set Password as 
                    - text: (this is case sensitive)
                      italic: true
            - type: li
              children:
                - type: lic
                  children:
                    - text: set User Role as HOL
                    - code: true
                      text: xxx
        - type: p
          children:
            - text: 'For instance, if you were assigned number 1, your data connection is:{ "username": "user1", "password": "test", "account": "XXXX-XXXX", "database": "HOL", "role": "HOL1", "warehouse": "HOL1_WH", "schema": "SCHEMA1" }'
  - cellType: TEXT
    cellId: 3665be16-9da2-4215-a386-76c44a46424a # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: p
          children:
            - text: "For instance, if you were assigned number 6, your data connection is:"
        - type: p
          children:
            - text: "If you were assigned user6, "
        - type: ul
          children:
            - type: li
              children:
                - type: lic
                  children:
                    - text: set Name as HOL6
            - type: li
              children:
                - type: lic
                  children:
                    - text: "set Account as XXX-XXX "
            - type: li
              children:
                - type: lic
                  children:
                    - text: set Warehouse as WH6
            - type: li
              children:
                - type: lic
                  children:
                    - text: set Database as HOL6
            - type: li
              children:
                - type: lic
                  children:
                    - text: set Schemas as ANALYTICS
            - type: li
              children:
                - type: lic
                  children:
                    - text: use Username & Password for Type
            - type: li
              children:
                - type: lic
                  children:
                    - text: set Username as USER6
            - type: li
              children:
                - type: lic
                  children:
                    - text: "set Password as XXX "
                    - text: (this is case sensitive)
                      italic: true
            - type: li
              children:
                - type: lic
                  children:
                    - text: set User Role as ROLE6
            - type: li
              children:
                - type: lic
                  children:
                    - text: check Snowpark integration
            - type: li
              children:
                - type: lic
                  children:
                    - text: check Allow use in writeback cells
            - type: li
              children:
                - type: lic
                  children:
                    - text: select Create connection
  - cellType: TEXT
    cellId: c9eb4a3b-d4cb-46c2-8d24-9d1a1d84057e # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - text: ""
            - src: /api/v1/file/ebe0b39a-96a1-4b54-ab47-c1d9190bee83
              type: image
              width: 600
              children:
                - text: ""
            - text: ""
  - cellType: INPUT
    cellId: fc5ad44d-e80b-4b09-aca1-c20c7193fd0c # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Schema
    config:
      inputType: TEXT_INPUT
      name: schema
      outputType: STRING
      options: null
      defaultValue: SCHEMA0
  - cellType: INPUT
    cellId: 229fa412-1161-4729-8057-64e158a45010 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Snowflake compute warehouse
    config:
      inputType: TEXT_INPUT
      name: warehouse
      outputType: STRING
      options: null
      defaultValue: WH0
  - cellType: INPUT
    cellId: c4b3efdc-64fc-4710-a51b-c4b4a6731dac # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Hex data connection name
    config:
      inputType: TEXT_INPUT
      name: connection_name
      outputType: STRING
      options: null
      defaultValue: Example_HOL
  - cellType: CODE
    cellId: 2b8909f6-c2ce-4787-a1bf-c7f919f0449c # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: HexConnection
    config:
      source: |-
        # Import Hex's hextoolkit package
        import hextoolkit as htk

        # Create Snowpark session
        session = htk.get_data_connection(connection_name).get_snowpark_session()
  - cellType: TEXT
    cellId: 62cfb800-c3a7-4400-980e-cbe9f6b6af50 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h1
          children:
            - text: Part 1 - Use Snowpark to access and prepare data for modeling
        - type: p
          children:
            - text: ""
            - src: /api/v1/file/be22e84f-147f-4671-b039-905abe566df9
              type: image
              width: 600
              children:
                - text: ""
            - text: ""
  - cellType: TEXT
    cellId: b6dc160c-91d1-449a-9ec7-aed3737a76b2 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h2
          children:
            - text: Snowpark DataFrame
        - type: p
          children:
            - text: Let's create a Snowpark DataFrame containing our shift sales data from the 
            - bold: true
              text: shift_sales_v
            - text:  view in our Snowflake account using the Snowpark session.table function. A DataFrame is a data structure that contains rows and columns, similar to a SQL table.
        - type: p
          children:
            - bold: true
              text: "Value:"
            - text:  Familiar representation of data for Python users.
  - cellType: CODE
    cellId: 7f39d1f1-9b57-41a1-aa17-064d6bcf5413 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Snowpark df
    config:
      source: snowpark_df = session.table("HOL." + schema +".SHIFT_SALES_V")
  - cellType: TEXT
    cellId: 554982c3-27aa-44b1-b3bd-672dbd0a4538 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h2
          children:
            - text: Preview the Data
        - type: p
          children:
            - text: |
                With our Snowpark DataFrame defined, let’s use the .show() function to take a look at the first 10 rows.
            - bold: true
              text: "Value:"
            - text:  Instant access to data.
  - cellType: CODE
    cellId: e6964528-0f5b-4a9a-81d0-b10b21def5bc # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Show_SnowflakeDF
    config:
      source: |-
        # Preview the data
        # Use the .show() function to look at the first 10 rows.
        # VALUE: instant access to data
        snowpark_df.show()
  - cellType: TEXT
    cellId: f8f16bd7-cb34-49b1-ad81-e30b89ec1624 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h2
          children:
            - text: Select, Filter, Sort
        - type: p
          children:
            - text: "Notice the Null values for \"shift_sales\". Let's look at a single location.To do this, we will make another Snowpark DataFrame, location_df, from the above DataFrame and we will:"
        - type: ol
          children:
            - type: li
              children:
                - type: lic
                  children:
                    - text: Select columns
            - type: li
              children:
                - type: lic
                  children:
                    - text: Filter to a single location ID
            - type: li
              children:
                - type: lic
                  children:
                    - text: Sort by date
        - type: p
          children:
            - bold: true
              text: Value
            - text: ": Efficient transformation pipelines using Python syntax and chained logic."
  - cellType: CODE
    cellId: 2bdc06ed-7597-46c2-9d4e-73bf9308925d # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: |-
        # Select
        location_df = snowpark_df.select("date", "shift", "shift_sales", "location_id", "city")

        # Filter
        location_df = location_df.filter(F.col("location_id") == 1135)

        # Sort
        location_df = location_df.order_by(["date", "shift"], ascending=[0, 0])

        # Display
        location_df.show(n=20)
  - cellType: TEXT
    cellId: acbba928-3d5f-499a-b1de-237b9b66cb67 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: p
          children:
            - text: We can see that shift sales are populated 8 days prior to the latest date in the data. The 
            - bold: true
              text: missing values
            - text:  represent future dates that do not have shift sales yet.
        - type: h2
          children:
            - text: "Snowpark works in two main ways:"
        - type: ol
          children:
            - type: li
              children:
                - type: lic
                  children:
                    - text: Snowpark code translated and executed as SQL on Snowflake
            - type: li
              children:
                - type: lic
                  children:
                    - text: Python functions deployed in a secure sandbox in Snowflake
        - type: p
          children:
            - text: ""
            - src: /api/v1/file/f68a6adb-4b74-41fa-8f40-a32e719c3474
              type: image
              width: 600
              children:
                - text: ""
            - text: ""
        - type: p
          children:
            - text: ""
        - type: p
          children:
            - text: "Here's the value of using Snowpark:"
        - type: p
          children:
            - text: ""
            - src: /api/v1/file/603b7f60-f374-4f8b-9b8f-157939f4fdad
              type: image
              width: 600
              children:
                - text: ""
            - text: ""
  - cellType: TEXT
    cellId: 063d74ed-901b-4a66-b138-b6a2dc446164 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h2
          children:
            - text: Explain the Query
        - type: p
          children:
            - text: Let's look at what was executed in Snowflake to create our location_df DataFrame.
        - type: p
          children:
            - text: The translated SQL query can be seen in the Snowsight interface under 
            - text: Activity
              italic: true
            - text:  in the 
            - text: Query History
              italic: true
            - text:  or directly in our notebook by using the explain() function. 
        - type: p
          children:
            - bold: true
              text: "Value:"
            - text:  Transparent execution and compute usage.
        - type: p
          children:
            - text: ""
            - src: /api/v1/file/2cd26bcc-2e25-4a75-8737-31d932c18ef4
              type: image
              width: 600
              children:
                - text: ""
            - text: ""
  - cellType: CODE
    cellId: e5ef0cb6-b113-4660-9d4f-000c6938c385 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: ExplainCode
    config:
      source: location_df.explain()
  - cellType: TEXT
    cellId: c7e5baae-4105-407f-affa-06cd9b45e966 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - text: ""
            - src: /api/v1/file/1fdf34d8-377a-48dc-a2d2-932d1dd72c28
              type: image
              width: 600
              children:
                - text: ""
            - text: ""
  - cellType: TEXT
    cellId: b16b5750-a53b-4ce0-bbcf-714de7b15a9e # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h2
          children:
            - text: Compare DataFrame Size
        - type: p
          children:
            - text: |
                Let's bring a sample of our Snowflake dataset to our Python environment in a pandas DataFrame using the to_pandas() function. We will compare how much memory is used for the pandas DataFrame compared to the Snowpark DataFrame. As we will see, no memory is used for the Snowpark DataFrame in our Python environment. All data in the Snowpark DataFrame remains on Snowflake.
            - bold: true
              text: "Value:"
            - text:  No copies or movement of data when working with Snowpark DataFrames.
  - cellType: CODE
    cellId: 4f360737-0d14-48c1-b4c3-543a310fc880 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: DFvsSnowflakeDF
    config:
      source: |-
        # Bring 10,000 rows from Snowflake to pandas
        pandas_df = snowpark_df.limit(10000).to_pandas()

        # Get Snowpark DataFrame size
        snowpark_size = sys.getsizeof(snowpark_df) / (1024*1024)
        print(f"Snowpark DataFrame Size (snowpark_df): {snowpark_size:.2f} MB")

        # Get pandas DataFrame size
        pandas_size = sys.getsizeof(pandas_df) / (1024*1024)
        print(f"Pandas DataFrame Size (pandas_df): {pandas_size:.2f} MB")
  - cellType: TEXT
    cellId: 8b611e32-c6df-4867-8517-c1eea407836b # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h2
          children:
            - text: Data Exploration
        - type: p
          children:
            - text: |
                Here, we will use Snowpark to explore our data. A common pattern for exploration is to use Snowpark to manipulate our data and then bring an aggregate table to our Python environment for visualization.
            - bold: true
              text: "Value:"
            - text: |-
                 - Native Snowflake performance and scale for aggregating large datasets. - Easy transfer of aggregate data to the client-side environment for visualization.
                As we explore our data, we will highlight what is being done in Snowflake and what we are transferring to our client-side environment (Python notebook environment) for visualization.
  - cellType: TEXT
    cellId: c016ab39-5eeb-4b7a-9597-4b0e32895a0b # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h2
          children:
            - text: How many rows are in our data?
        - type: p
          children:
            - text: |
                This will give us an idea of how we might need to approach working with this data. Do we have enough data to build a meaningful model? What compute might be required? Will we need to sample the data?
            - bold: true
              text: "What's happening where?:"
            - text:  Rows counted in Snowflake. No data transfer.
  - cellType: CODE
    cellId: 197e79fe-79fc-4239-822f-0d17670f23fe # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: Count
    config:
      source: |-
        #Use the .count() function
        snowpark_df.count()
  - cellType: TEXT
    cellId: a55d5a39-cf07-4b97-ac67-3ece994451d6 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h2
          children:
            - text: Let's calculate some descriptive statistics.
        - type: p
          children:
            - text: |
                We use the Snowpark describe() function to calculate summary statistics and then bring the aggregate results into a pandas DataFrame to visualize in a formatted table.
            - bold: true
              text: "What's happening where?:"
            - text:  Summary statistics calculated in Snowflake. Transfer aggregate summary statistics for client-side visualization.
  - cellType: CODE
    cellId: 2b26b690-4711-4c6f-8dec-54f801dc7887 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: SnowflakeDF_to_Pandas
    config:
      source: |-
        #Use the Snowpark DataFrame .describe function. You need to need to visualize from a pandas DataFrame
        snowpark_df.describe().to_pandas()
  - cellType: CODE
    cellId: 3cb188e6-34d7-492b-aea6-c80381c361ef # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: DefineNumericColumns
    config:
      source: |-
        # What are the numeric columns?
        # Define Snowflake numeric types
        numeric_types = [T.DecimalType, T.DoubleType, T.FloatType, T.IntegerType, T.LongType]

        # Get numeric columns
        numeric_columns = [col.name for col in snowpark_df.schema.fields if type(col.datatype) in numeric_types]
        numeric_columns
  - cellType: CODE
    cellId: 7a9f7c31-3e6f-4727-bf4b-9a8d09988d0b # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: DefineCategoricalColumns
    config:
      source: |-
        # What are the categorical columns?
        # Define Snowflake categorical types
        categorical_types = [T.StringType]

        # Get categorical columns
        categorical_columns = [col.name for col in snowpark_df.schema.fields if type(col.datatype) in categorical_types]
        categorical_columns
  - cellType: CODE
    cellId: d190202d-1ed1-4235-9d20-0d04b232c5a4 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: |-
        # What are the average shift sales (USD) by city?
        # Group by city and average shift sales
        analysis_df = snowpark_df.group_by("city").agg(F.mean("shift_sales").alias("avg_shift_sales"))

        # Sort by average shift sales
        analysis_df = analysis_df.sort("avg_shift_sales", ascending=True)

        # Pull to pandas and plot
        analysis_df.to_pandas().plot.barh(x="CITY", y="AVG_SHIFT_SALES")
  - cellType: TEXT
    cellId: 096af97e-249a-4f79-998c-60086753f099 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - text: ""
            - src: /api/v1/file/3bbf7455-5ebe-4e0c-badd-cd31c7e522de
              type: image
              width: 600
              children:
                - text: ""
            - text: ""
  - cellType: TEXT
    cellId: 254b0eb9-99ec-4727-860c-6124416de986 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h2
          children:
            - text: Feature Engineering
        - type: p
          children:
            - text: |
                Now let's keep revelant columns and transform columns to create features needed for our prediction model.To make some of our features more useful, we will normalize them using standard preprocessing techniques, such as One-Hot Encoding and MinMaxScaling. With SnowparkML, you can use a standard sklearn-style API to execute fully distributed feature engineering preprocessing tasks on Snowflake compute, with zero data movement. Let's fit a scaler and encoder to our data, then use it to transform the data, producing new feature columns.
        - type: p
          children:
            - bold: true
              text: "Value:"
            - text: |
                 The Snowpark syntax makes pipelines easy to implement and understand. The syntax also allows for easy migration of Spark pipelines to Snowflake.
        - type: p
          children:
            - bold: true
              text: All transformations for feature engineering in this notebook will be executed on Snowflake compute.
        - type: p
          children:
            - text: |
                Notice what we haven't had to do? No tuning, maintenance, or operational overhead. We just need a role, warehouse, and access to the data.
            - bold: true
              text: Value
            - text: ": Near-zero maintenance. Focus on the work that brings value."
  - cellType: TEXT
    cellId: f4fe063f-4f73-4c93-a852-36eddd67dac3 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h2
          children:
            - text: Create a Rolling Average Feature
        - type: p
          children:
            - text: We will use a Snowflake window function to get a 
            - bold: true
              text: rolling shift average by location
            - text:  over time. Window functions allow us to aggregate on a "moving" group of rows.
        - type: h4
          children:
            - bold: true
              text: Step 1. Create a Window
        - type: p
          children:
            - text: Our window will partition the data by location and shift. It will order rows by date. It will include all rows prior to the current date of the observation it is aggregating for.
  - cellType: CODE
    cellId: 13a5b103-47f9-42d7-b0a1-ed1d4cc16b19 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: CreateRollingWindows
    config:
      source: |-
        window_by_location_all_days = (
            Window.partition_by("location_id", "shift")
            .order_by("date")
            .rows_between(Window.UNBOUNDED_PRECEDING, Window.CURRENT_ROW - 1)
        )
  - cellType: TEXT
    cellId: b2c8fa4d-b5c3-4c00-8519-7b3b9de4ee69 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h4
          children:
            - bold: true
              text: Step 2. Aggregate across the Window
  - cellType: CODE
    cellId: e06e1b75-9b6e-453c-9c44-bd12579aa748 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: AggregateRollingWindows
    config:
      source: |-
        snowpark_df = snowpark_df.with_column(
            "avg_location_shift_sales", 
            F.avg("shift_sales").over(window_by_location_all_days)
        )
  - cellType: TEXT
    cellId: d0f630ce-77ea-4889-bb0c-c779f6234016 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h2
          children:
            - text: Impute Missing Values
        - type: p
          children:
            - text: The rolling average feature we just created is missing if there are no prior shift sales at that location. We will replace those missing values with 0.
  - cellType: CODE
    cellId: 1d598efd-8cd6-41d8-8dc1-b07eaa23042d # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: ImputeMissingValues
    config:
      source: snowpark_df = snowpark_df.fillna(value=0, subset=["avg_location_shift_sales"])
  - cellType: TEXT
    cellId: 243a185f-d1ce-45f1-9075-6cf7ef315158 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h2
          children:
            - text: Leverage Snowpark ML Modeling API to create features
        - type: p
          children:
            - text: Snowpark ML provides APIs to support each stage of an end-to-end machine learning development and deployment process and includes two key components: 
            - url: https://docs.snowflake.com/en/developer-guide/snowpark-ml/snowpark-ml-modeling
              type: a
              children:
                - text: Snowpark ML Modeling
            - text:  and 
            - url: https://docs.snowflake.com/en/developer-guide/snowpark-ml/snowpark-ml-mlops-model-registry
              type: a
              children:
                - text: Snowpark ML Ops
            - text: .
        - type: p
          children:
            - text: ""
            - url: https://docs.snowflake.com/en/developer-guide/snowpark-ml/snowpark-ml-modeling
              type: a
              children:
                - text: Snowpark ML Modeling
            - text:  supports data preprocessing, feature engineering, and model training in Snowflake using popular machine learning frameworks, such as scikit-learn, xgboost, and lightgbm. This API also includes a preprocessing module that can use compute resources provided by a Snowpark-optimized warehouse to provide scalable data transformations.
        - type: p
          children:
            - text: Snowpark ML Operations (MLOps), featuring the 
            - url: https://docs.snowflake.com/en/developer-guide/snowpark-ml/snowpark-ml-mlops-model-registry
              type: a
              children:
                - text: Snowpark ML Model Registry
            - text: ", complements the Snowpark ML Development API. The model registry allows secure deployment and management of models in Snowflake, and supports models trained both inside and outside of Snowflake."
        - type: p
          children:
            - text: ""
        - type: p
          children:
            - text: "Here are a Snowpark Features commonly used for Data Engineering tasks:"
        - type: p
          children:
            - text: ""
            - src: /api/v1/file/8b46c913-08bd-46a1-9c76-ea36b25724ce
              type: image
              width: 600
              children:
                - text: ""
            - text: ""
        - type: p
          children:
            - text: ""
        - type: p
          children:
            - text: "Here are Snowpark Features commonly used by Data Scientists for ML efforts:"
        - type: p
          children:
            - text: ""
            - src: /api/v1/file/c0d729da-2d91-4981-99b9-0bb06bc012af
              type: image
              width: 600
              children:
                - text: ""
            - text: ""
  - cellType: CODE
    cellId: 87c0c76c-cca1-4a00-9a88-4ca1eba1fe34 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: ScaleUpSnowflakeCompute
    config:
      source: session.sql("alter warehouse " + warehouse + " set warehouse_size = LARGE").collect()
  - cellType: CODE
    cellId: 52d691f3-7f9c-483e-abcd-ed9285fe9ee0 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: DefineDataTransformations
    config:
      source: |-
        # Import Snowpark ML: Machine Learning Toolkit for Snowflake
        import snowflake.ml.modeling.preprocessing as snowmlpp

        # Define our scaler and ordinal encoding functions

        # Snowpark ML scaler (MinMaxScaler) is used to shrink data within the given range, usually of 0 to 1. 
        # It transforms data by scaling features to a given range. It scales the values to a specific value range without changing the shape of the original distribution.
        # For the Tasty_Bytes data, use MinMaxScaler to normalize "CITY_POPULATION" into "CITY_POPULATION_NORM" with values between 0 and 1.

        def fit_scaler(session, df):
            mm_target_columns = ["CITY_POPULATION"]
            mm_target_cols_out = ["CITY_POPULATION_NORM"]
            snowml_mms = snowmlpp.MinMaxScaler(input_cols=mm_target_columns, output_cols=mm_target_cols_out)
            snowml_mms.fit(df)
            return snowml_mms

        # Snowpark ML ordinal encoding (OE) is used to improve model performance by providing more information to the model about categorical variables. 
        # It can help to avoid the problem of ordinality, which can occur when a categorical variable has a natural ordering (e.g. “small”, “medium”, “large”).
        # For the Tasty_Bytes data, use OE to change "SHIFT" which is currently AM or PM into and integer representation of "SHIFT_OHE" is 1.0 or 0.0. 

        def fit_oe(session, df):
            oe_target_cols = ["SHIFT"]
            oe_output_cols = ["SHIFT_OE"]
            snowml_oe = snowmlpp.OrdinalEncoder(input_cols=oe_target_cols, output_cols=oe_output_cols)
            snowml_oe.fit(df)
            return snowml_oe
  - cellType: CODE
    cellId: 1fa14dbd-ebfc-40f5-bcba-0cfc3ae7d540 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: RunDataTransformations
    config:
      source: |-
        # Run Snowpark ML preprocessing functions against our feature data

        # For the Tasty_Bytes data, use MinMaxScaler to normalize "CITY_POPULATION" into "CITY_POPULATION_NORM" with values between 0 and 1.
        snowml_mms = fit_scaler(session, snowpark_df)
        normed_df = snowml_mms.transform(snowpark_df)

        # For the Tasty_Bytes data, use OneHotEncoder to change "SHIFT" which is currently AM or PM into and integer representation of "SHIFT_OHE_AM" is 1 or 0 and "SHIFT_OHE_PM" is 1 or 0. 
        snowml_oe = fit_oe(session, normed_df)
        oe_df = snowml_oe.transform(normed_df)
        oe_df.show()
  - cellType: TEXT
    cellId: b222fc6a-4107-48d6-9ceb-de4ed193e260 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h2
          children:
            - text: Filter to Historical Data
        - type: p
          children:
            - text: Our data includes placeholders for future data with missing shift sales. The future data represents the next 7 days of shifts for all locations. The historical data has shift sales for all locations where a food truck parked during a shift. We will only use historical data when training our model and will filter out the dates where the shift_sales column is missing.
  - cellType: CODE
    cellId: ca8afd5e-9b51-4f85-84c1-eff0c24c06dd # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: RemoveDatesInFuture
    config:
      source: |-
        # Data Science best practice: Always perform data quality on your training set e.g. remove nulls or invalid cells as they are the biggest problem in a training set as they output high false positives

        # Specifically for Tasty_Bytes data, dates where "shift_sales" are null values reflect future dates where sales need to be predicted.
        # Filter out these future dates so these records will not be used in model training. 
        historical_df = oe_df.filter(F.col("shift_sales").is_not_null())
  - cellType: TEXT
    cellId: 052afc51-9f27-489d-ad60-105c64dbdf5a # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h2
          children:
            - text: Persist Transformations
        - type: p
          children:
            - text: |
                If we want to save the changes we can either save it as a table, meaning the SQL generated by the DataFrame is executed and the result is stored in a table or as a view where the DataFrame SQL will be the definition of the view.
            - bold: true
              text: save_as_table
            - text:  saves the result in a table, if 
            - bold: true
              text: mode='overwrite'
            - text:  then it will also replace the data that is in it.
  - cellType: CODE
    cellId: f7ab1686-1230-4f6b-bbf9-68a8c03b0021 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: SaveDF_to_Snowflake
    config:
      source: |-
        # Let's select 
        historical_df.write.save_as_table(table_name=schema + '.INPUT_DATA', mode='overwrite')
        session.table('INPUT_DATA').show()
  - cellType: TEXT
    cellId: 8c0b7984-88d4-47a7-97ab-332d5c9825d1 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h1
          children:
            - text: Part 2 - Use Snowflake Cortex ML-Based Function for Time-Series Forecasting
        - type: paragraph
          children:
            - text: ""
            - src: /api/v1/file/75f427c5-4512-40de-b069-4bdffea63a59
              type: image
              width: 600
              children:
                - text: ""
            - text: ""
  - cellType: TEXT
    cellId: e92656a3-5c79-43ca-a814-3c762e79c553 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h2
          children:
            - text: Snowflake Cortex ML Functions
        - type: p
          children:
            - text: Time-Series Forecasting is part of Snowflake Cortex, Snowflake’s intelligent, fully-managed AI and ML service. This feature is part of the Snowflake Cortex ML-based function suite. Forecasting employs a machine learning algorithm to predict future data by using historical time series data.
        - type: p
          children:
            - text: ""
            - src: /api/v1/file/8e550c03-83fd-4c28-94e0-7ed6d1d2d2ec
              type: image
              width: 600
              children:
                - text: ""
            - text: ""
        - type: p
          children:
            - text: "Time series forecasting produces univariate predictions of future data based on historical input data. A common use case is to forecast sales based on seasonality and other factors.The historical data must include:"
        - type: ul
          children:
            - type: li
              children:
                - type: lic
                  children:
                    - text: A timestamp column.
            - type: li
              children:
                - type: lic
                  children:
                    - text: A target value column representing some quantity of interest at each timestamp.
        - type: p
          children:
            - text: |-
                
                The historical data can also include additional columns that might have influenced the target value (
            - url: https://en.wikipedia.org/wiki/Exogenous_and_endogenous_variables
              type: a
              children:
                - text: exogenous variables
            - text: ). These can be numbers or text. The nature (categorical or continuous) of each such column is automatically detected.
        - type: p
          children:
            - text: This historical data is used to train a machine learning model that produces a forecast of the value column at future timestamps. The model is a schema-level object and can be used for multiple forecasts after it is trained.
        - type: p
          children:
            - text: Forecasting works with either single-series or multi-series data. Multi-series data represents multiple independent threads of events. For example, if you have sales data for multiple stores, each store’s sales can be forecast separately by a single model based on the store identifier.
        - type: p
          children:
            - text: ""
            - src: /api/v1/file/f15e4fdb-470d-4ee4-99d4-f3851ec3d62b
              type: image
              width: 600
              children:
                - text: ""
            - text: ""
  - cellType: TEXT
    cellId: 9ce72e2c-c328-46b0-bc28-5747b59492ef # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: p
          children:
            - text: To produce forecasts of time series data, use the Snowflake built-in class 
            - url: https://docs.snowflake.com/en/sql-reference/classes/forecast
              type: a
              children:
                - text: FORECAST
            - text: ", and follow these steps:"
        - type: ol
          children:
            - type: li
              children:
                - type: lic
                  children:
                    - text: ""
                    - url: https://docs.snowflake.com/en/sql-reference/classes/forecast.html#label-class-forecast-create
                      type: a
                      children:
                        - text: Create a forecast model object
                    - text: ", passing in a reference to the training data.This object will fit (train) a model to the training data that you provide. The model is a schema-level object."
            - type: li
              children:
                - type: lic
                  children:
                    - text: Using this forecast model object, call 
                    - url: https://docs.snowflake.com/en/sql-reference/classes/forecast.html#label-class-forecast-create
                      type: a
                      children:
                        - text: CREATE SNOWFLAKE.ML.FORECAST
                    - text:  to produce a forecast, passing in information about the future period (that is, the number of time steps and values for any non-timestamp features).The method uses the model to produce a forecast.
  - cellType: TEXT
    cellId: 14115d95-15c0-48c8-9907-918954509a63 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h4
          children:
            - text: About the Forecasting Algorithm
        - type: p
          children:
            - text: The forecasting algorithm is powered by a 
            - url: https://en.wikipedia.org/wiki/Gradient_boosting
              type: a
              children:
                - text: gradient boosting machine
            - text:  (GBM). Like an 
            - url: https://en.wikipedia.org/wiki/Autoregressive_integrated_moving_average
              type: a
              children:
                - text: ARIMA
            - text:  model, it uses a differencing transformation to model data with a non-stationary trend and uses auto-regressive lags of the historical target data as model features.
        - type: p
          children:
            - text: Additionally, the algorithm uses rolling averages of historical target data to help predict trends and automatically produces cyclic calendar features (such as day of week and week of year) from timestamp data.
        - type: p
          children:
            - text: You can fit models with only historical target and timestamp data, or you may include exogenous data (features) that might have influenced the target value. Exogenous variables can be numerical or categorical and may be NULL (rows containing NULLs for exogenous variables are not dropped).
        - type: p
          children:
            - text: The algorithm does not rely on one-hot encoding when training on categorical features, so you can use categorical data with many dimensions (high cardinality).
        - type: p
          children:
            - text: "For more details about Snowflake's ML-Powered Forecasting Algorithm and how to use, please see "
            - url: https://docs.snowflake.com/en/user-guide/ml-powered-forecasting#about-the-forecasting-algorithm
              type: a
              children:
                - text: https://docs.snowflake.com/en/user-guide/ml-powered-forecasting#about-the-forecasting-algorithm
            - text: ""
  - cellType: TEXT
    cellId: e100a021-682b-46c0-93fc-3d6380ed64b2 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: p
          children:
            - text: "Here's a short video presenting "
            - url: https://www.youtube.com/watch?v=8WgVTf3im7w
              type: a
              children:
                - text: "Snowflake ML Powered Functions: Forecasting, Anomaly Detection, Contribution Explorer"
            - text: ""
        - type: paragraph
          children:
            - text: "Check out the code at: "
            - url: https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbUZVS1dBWGhmYlVJUEt4MUsyWlY1VzVNbHVTUXxBQ3Jtc0ttaURLdms3dE4xeHZuVHVtVmlOZmxOQWRiOXA4RjNweWJuRTBSSkJkMnhxVUJseFhNdnBZQkZVbEVnWGdBbnFsODZ6TlZkeV9wSmo1NzhtbUZnOTdfYWE2czRjSnBmRTNkYWZpRm5lckxTay1lTi1Edw&q=https%3A%2F%2Fgithub.com%2FSnowflake-Labs%2Fsf-samples%2Fblob%2Fmain%2Fsamples%2FML%2520Powered%2520Functions%2FJune%25202023%2520MLPF%2520Demos.sql&v=8WgVTf3im7w
              type: a
              children:
                - text: https://github.com/Snowflake-Labs/sf-...
            - text: ""
        - type: paragraph
          children:
            - text: ""
  - cellType: SQL
    cellId: f9885f5d-b3b5-4767-a0d5-2f0ca2931b17 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: SQL_ViewSFTable
    config:
      source: SELECT * FROM SALES_FORECAST_INPUT LIMIT 10;
      dataFrameCell: false
      dataConnectionId: null
      resultVariableName: dataframe_6
      useRichDisplay: false
      sqlCellOutputType: PANDAS
      useQueryMode: false
      castDecimals: true
      useNativeDates: true
      outputFilteredResult: true
      allowDuplicateColumns: false
      tableDisplayConfig: null
  - cellType: SQL
    cellId: 2908ed1f-9b1b-4065-a130-a0f7fc71258a # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: SQL_CreateSFView
    config:
      source: |-
        -- Create view for lobster sales
        CREATE OR REPLACE VIEW lobster_sales AS (
            SELECT
                timestamp,
                total_sold
            FROM
                SALES_FORECAST_INPUT
            WHERE
                menu_item_name LIKE 'Lobster Mac & Cheese'
        );
      dataFrameCell: false
      dataConnectionId: null
      resultVariableName: dataframe
      useRichDisplay: false
      sqlCellOutputType: PANDAS
      useQueryMode: false
      castDecimals: true
      useNativeDates: true
      outputFilteredResult: true
      allowDuplicateColumns: false
      tableDisplayConfig: null
  - cellType: SQL
    cellId: a9ffbd81-012a-4059-94fb-f6f92dc39417 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: SQL_CreateCortexMLForecast
    config:
      source: |-
        CREATE OR REPLACE snowflake.ml.forecast lobstermac_forecast (
            INPUT_DATA => SYSTEM$REFERENCE('VIEW', 'lobster_sales'),
            TIMESTAMP_COLNAME => 'TIMESTAMP',
            TARGET_COLNAME => 'TOTAL_SOLD'
        );
      dataFrameCell: false
      dataConnectionId: null
      resultVariableName: dataframe_7
      useRichDisplay: false
      sqlCellOutputType: PANDAS
      useQueryMode: false
      castDecimals: true
      useNativeDates: true
      outputFilteredResult: true
      allowDuplicateColumns: false
      tableDisplayConfig: null
  - cellType: SQL
    cellId: e6140058-0369-480b-81c4-0b12cafb5408 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: SQL_ShowCortexMLForecast
    config:
      source: |-
        -- Show models to confirm training has completed: 
        SHOW snowflake.ml.forecast;
      dataFrameCell: false
      dataConnectionId: null
      resultVariableName: dataframe_8
      useRichDisplay: false
      sqlCellOutputType: PANDAS
      useQueryMode: false
      castDecimals: true
      useNativeDates: true
      outputFilteredResult: true
      allowDuplicateColumns: false
      tableDisplayConfig: null
  - cellType: TEXT
    cellId: 3d9cfd7a-f374-42b1-b146-46a48e6a4467 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h1
          children:
            - text: Part 3 - Use Snowpark to train a model
        - type: p
          children:
            - text: ""
            - src: /api/v1/file/bb980888-52c2-44db-b304-a3326017b8fc
              type: image
              width: 600
              children:
                - text: ""
            - text: ""
  - cellType: TEXT
    cellId: e4cafd35-30e0-4185-96f3-32905fd5e8e0 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - text: ""
            - src: /api/v1/file/b46664e1-98d3-4ce3-b88b-d31c5a910b18
              type: image
              width: 600
              children:
                - text: ""
            - text: ""
  - cellType: TEXT
    cellId: 9d0f622b-c14e-435a-ac7b-476bab0a267a # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h2
          children:
            - text: Drop Columns
        - type: p
          children:
            - text: Let's return to the original prepared table, with all cities listed, and drop columns that will not be used in the model.
  - cellType: CODE
    cellId: c7af022f-2de8-444f-b2d6-6ce218e0516d # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: DropUnnecessaryColumns
    config:
      source: |-
        prepared_df = historical_df.drop("location_id", "city_population", "shift", "city", "date")
        prepared_df.show()
  - cellType: TEXT
    cellId: d6685956-f4c6-4565-85a6-6e6c55f8879a # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h2
          children:
            - text: Build a simple XGBoost Regression Model on Snowflake
        - type: p
          children:
            - text: "We will now use our training data to train a linear regression model on Snowflake.Recall from above, the two main ways that Snowpark works:"
        - type: ol
          children:
            - type: li
              children:
                - type: lic
                  children:
                    - text: Snowpark code translated and executed as SQL on Snowflake
            - type: li
              children:
                - type: lic
                  children:
                    - text: Python functions deployed in a secure sandbox in Snowflake
        - type: p
          children:
            - text: We will be leveraging the deployment of Python functions into Snowflake for training and model deployment.
  - cellType: CODE
    cellId: 1cfb6932-eda8-49d2-9e4c-ee04b3c4b4a5 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: ListAvailableColumns
    config:
      source: |-
        # Retrieve column names needed in the next code block to populate feature_column_names
        prepared_df.columns
  - cellType: CODE
    cellId: 8d40ebc3-610f-4fab-9978-155d97e63c8d # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: DefinePredictionModel
    config:
      source: |-
        # Let's define relevant features needed for the prediction model.
        LABEL_COLUMNS = ["SHIFT_SALES"]
        OUTPUT_COLUMNS = ["PRED_SHIFT_SALES"]
        FEATURE_COLUMN_NAMES = ["SHIFT_OE", "CITY_POPULATION_NORM", "MONTH", "DAY_OF_WEEK","LATITUDE","LONGITUDE","AVG_LOCATION_SHIFT_SALES"]

        input_df = prepared_df.select(*LABEL_COLUMNS, *FEATURE_COLUMN_NAMES)
        input_df.show()
  - cellType: TEXT
    cellId: 9b8cc453-dafa-4b58-aa30-ca5cf6b70f93 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - text: SnowparkML also includes metric calculations such as correlations, and more. We will use the SnowparkML correlation method on our input dataframe to identify any linearly correlated features to the output. We'll also use matplotlib to plot the resulting matrix. Notice that all of the correlation calculations are pushed down to Snowflake!
  - cellType: CODE
    cellId: 64c2ba50-fda3-403b-90ba-217d27786b5c # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: RunCorrelationAnalysis
    config:
      source: |-
        import matplotlib.pyplot as plt
        import seaborn as sns
        from snowflake.ml.modeling.metrics.correlation import correlation
        corr_df = correlation(df=input_df)
  - cellType: CODE
    cellId: ca933ade-cc4c-45ce-a271-1d0e69ee1871 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: VisualizeCorrectionAnalysis
    config:
      source: |-
        # Return only the correlation summary results to generate this heatmap
        sns.heatmap(corr_df, cmap="YlGnBu", annot=True)
  - cellType: TEXT
    cellId: 3dc42061-e76a-4500-b3e6-76b07586df69 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - text: What's great about this, is that we are using a lot of Snowpark components under the hood- the dataframe API, SQL, Python stored procedures and more. But with the new SnowparkML API, data scientists can take advantage of all that Snowpark affords them, while using common, familiar APIs that match how they do their work today.
        - type: paragraph
          children:
            - text: Now that we have our feature data, let's actually fit an XGBoost model to our features to attempt to predict future sales. We'll fit several different models with different hyperparameters, and then show how we can use the Snowpark Model Registry to select our best-fit model.
  - cellType: CODE
    cellId: ae4cab6c-ab64-407f-9ce3-249d3a989bd5 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: SplitData_ModelTraining
    config:
      source: |-
        # Split the data into train and test sets
        train_df, test_df = input_df.random_split(weights=[0.9, 0.1], seed=98)
  - cellType: TEXT
    cellId: e307c1a0-796b-4d4d-a15e-13c7a308912c # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h2
          children:
            - text: What's happening when you leverage Snowpark ML Modeling API?
        - type: p
          children:
            - text: Let's run our training job using the SnowparkML Modeling API- this will push down our model training to run on Snowflake, and you'll notice that the type of the model object returend is a SnowparkML XGBClassifier- this has some benefits, but also is fully compatible with the standard sklearn/xgboost model objects.
        - type: ul
          children:
            - type: li
              children:
                - type: lic
                  children:
                    - text: The model.fit() function actually creates a temporary stored procedure in the background. This also means that the model training is a single-node operation. Be sure to use a Snowpark Optimized Warehouse if you need more memory. We are just using an XS Standard Virtual Warehouse here, which we created at the beginning of this quickstart.
            - type: li
              children:
                - type: lic
                  children:
                    - text: The model.predict() function actually creates a temporary vectorized UDF in the background, which means the input DataFrame is batched as Pandas DataFrames and inference is parallelized across the batches of data. You can check the query history once you execute the following cell to check.
        - type: p
          children:
            - text: ""
            - src: /api/v1/file/424208e8-b14a-46cc-b76c-9a42e13529c8
              type: image
              width: 600
              children:
                - text: ""
            - text: ""
  - cellType: CODE
    cellId: 31b7be81-3792-4c4a-b483-1feee5aad6a1 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: CreateXGBoostRegressorModel
    config:
      source: |-
        from snowflake.ml.modeling.xgboost import XGBRegressor
        # Define the XGBRegressor
        regressor = XGBRegressor(
            label_cols = LABEL_COLUMNS,
            input_cols = FEATURE_COLUMN_NAMES,
            output_cols = OUTPUT_COLUMNS
        )

        # Train
        regressor.fit(train_df)

        # Predict
        result = regressor.predict(test_df)
  - cellType: CODE
    cellId: e0569d84-a479-47e1-93ff-55ec829f974a # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: RunModelOnRemainingData
    config:
      source: |-
        # Just to illustrate, we can also pass in a Pandas DataFrame to Snowpark ML's model.predict()
        regressor.predict(test_df.to_pandas())
        # try 
        regressor.predict(test_df)
  - cellType: TEXT
    cellId: 44297461-f97c-4da2-a9cf-686bfc09ef3b # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - text: Let's analyze the results using Snowpark ML's MAPE.
  - cellType: CODE
    cellId: 4bf87cb5-5cd9-42ce-829b-647c72586d03 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: CalculateModelError
    config:
      source: |-
        # Use Snowpark ML metrics to calculate
        from snowflake.ml.modeling.metrics import mean_absolute_percentage_error, mean_squared_error

        # Predict
        results = regressor.predict(test_df)

        # Calculate MAPE
        mape = mean_absolute_percentage_error(df=results, y_true_col_names=LABEL_COLUMNS, y_pred_col_names=OUTPUT_COLUMNS)

        # Calculate MSE
        mse = mean_squared_error(df=results, y_true_col_names=LABEL_COLUMNS, y_pred_col_names=OUTPUT_COLUMNS)

        results.select([*LABEL_COLUMNS, *OUTPUT_COLUMNS]).show()
        print(f'''Mean absolute percentage error: {mape}''')
        print(f'''Mean squared error: {mse}''')
  - cellType: CODE
    cellId: 6973eccc-5d7f-4555-9575-3a209afce64d # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: VisualizeModelError
    config:
      source: |-
        # Plot actual vs predicted 
        g = sns.relplot(data=results["SHIFT_SALES", "PRED_SHIFT_SALES"].to_pandas().astype("float64"), x="SHIFT_SALES", y="PRED_SHIFT_SALES", kind="scatter")
        g.ax.axline((0,0), slope=1, color="r")

        plt.show()
  - cellType: TEXT
    cellId: 110b79a5-cbf8-459d-b133-7598e9767a49 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h2
          children:
            - text: Snowpark ML's GridSearchCV()
        - type: p
          children:
            - text: Now, let's use Snowpark ML's GridSearchCV() function to find optimal model parameters.
  - cellType: CODE
    cellId: be9289fd-ce1b-43c8-be03-f6d81565b592 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: ImproveModel_OptimizeHyperparameters
    config:
      source: |-
        from snowflake.ml.modeling.model_selection import GridSearchCV

        grid_search = GridSearchCV(
        estimator=XGBRegressor(),
        param_grid={
        "n_estimators":[25, 50],
        "learning_rate":[0.4, 0.5],
        },
        n_jobs = -1,
        scoring="neg_mean_absolute_percentage_error",
        input_cols=FEATURE_COLUMN_NAMES,
        label_cols=LABEL_COLUMNS,
        output_cols=OUTPUT_COLUMNS
        )


        # Train
        grid_search.fit(train_df)
  - cellType: CODE
    cellId: fdcd660b-c535-486d-b622-39d32011a000 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: AnalyzeGridSearchResults
    config:
      source: |-
        # Let's analyze the grid_search results
        gs_results = grid_search.to_sklearn().cv_results_
        n_estimators_val = []
        learning_rate_val = []
        for param_dict in gs_results["params"]:
            n_estimators_val.append(param_dict["n_estimators"])
            learning_rate_val.append(param_dict["learning_rate"])
        mape_val = gs_results["mean_test_score"]*-1

        gs_results_df = pd.DataFrame(data={
            "n_estimators":n_estimators_val,
            "learning_rate":learning_rate_val,
            "mape":mape_val})

        sns.relplot(data=gs_results_df, x="learning_rate", y="mape", hue="n_estimators", kind="line")

        plt.show()
  - cellType: CODE
    cellId: 9df964f3-812c-4c2e-b114-546b3462b3d2 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: SaveOptimalModel
    config:
      source: |-
        # Let's save our optimal model and its metadata:
        optimal_model = grid_search.to_sklearn().best_estimator_
        optimal_n_estimators = grid_search.to_sklearn().best_estimator_.n_estimators
        optimal_learning_rate = grid_search.to_sklearn().best_estimator_.learning_rate


        optimal_mape = gs_results_df.loc[(gs_results_df['n_estimators']==optimal_n_estimators) &
                                (gs_results_df['learning_rate']==optimal_learning_rate),'mape'].values[0]
  - cellType: TEXT
    cellId: 9412fbc7-a3b3-4a39-a435-bbab7978cf09 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h2
          children:
            - bold: true
              text: Scale down your assigned Snowflake compute warehouse.
  - cellType: CODE
    cellId: e3cebeed-4a79-4314-a761-2095fc0b78ef # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: ScaleDownSnowflakeCompute
    config:
      source: |-
        # Decrease size of Snowflake compute warehouse to XSMALL
        session.sql("alter warehouse " + warehouse + " set warehouse_size = XSMALL").collect()
  - cellType: TEXT
    cellId: 39f5d778-8d2c-4975-addb-75583754bdf0 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h1
          children:
            - text: Part 4 - Use Snowpark for MLOps
        - type: p
          children:
            - text: ""
            - src: /api/v1/file/c0e2e39e-b869-4826-8a3f-be6cabb3900e
              type: image
              width: 600
              children:
                - text: ""
            - text: ""
  - cellType: TEXT
    cellId: 6939a130-983a-4a4c-aa71-c95c1800bc53 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - text: ""
            - src: /api/v1/file/2774b985-7f4b-4801-baaf-27a2dcba8bef
              type: image
              width: 600
              children:
                - text: ""
            - text: ""
  - cellType: TEXT
    cellId: 1afb8642-5020-4338-8337-0bb9555b1616 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h2
          children:
            - text: Now let's use Snowflake's ML Model Registry
        - type: p
          children:
            - text: Model Registry was created to support model management operations including model registration, versioning, metadata and audit trails. Integrated deployment infrastructure for batch inference is a critical ease-of-use feature. Users can deploy ML models for batch inference from the registry directly into a Snowflake Warehouse as a vectorized UDF, or as a service to a customer-specified Compute Pool in Snowpark Container Services.
        - type: p
          children:
            - text: Snowflake's Model Registry supports SciKitLearn, XGBoost, Pytorch, Tensorflow and MLFlow (via the pyfunc interface) models.
        - type: p
          children:
            - text: ""
            - src: /api/v1/file/172736fd-d761-4509-af98-792eabc54c95
              type: image
              width: 600
              children:
                - text: ""
            - text: ""
        - type: p
          children:
            - text: Model Registry allows easy deployment of pre-trained open-source models from providers such as HuggingFace. See this blog for more details: 
            - url: https://medium.com/snowflake/whats-in-a-name-model-naming-versioning-in-snowpark-model-registry-b5f7105fd6f6
              type: a
              children:
                - text: https://medium.com/snowflake/whats-in-a-name-model-naming-versioning-in-snowpark-model-registry-b5f7105fd6f6
            - text:  or the Model Registry documentation: 
            - url: https://docs.snowflake.com/en/developer-guide/snowpark-ml/snowpark-ml-mlops-model-registry
              type: a
              children:
                - text: https://docs.snowflake.com/en/developer-guide/snowpark-ml/snowpark-ml-mlops-model-registry
            - text: ""
  - cellType: TEXT
    cellId: 14697777-bdb5-442a-b03e-c8609f987109 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h2
          children:
            - text: Create the Model Registry and register your model
  - cellType: CODE
    cellId: fdbb7f52-8762-4108-8ded-65d1bf8b209b # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: CreateModelRegistry
    config:
      source: |-
        from snowflake.ml.registry import Registry

        native_registry = Registry(session, database_name="HOL", schema_name=schema)
  - cellType: CODE
    cellId: 5f414cc8-31ce-4fb2-bfb7-6c4999b657c0 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: |-
        # Code to delete model(s) in native_registry used for clean up purposes.
        # native_registry.delete_model("SHIFT_SALES_PREDICTION")
  - cellType: CODE
    cellId: 2e9445a2-4f79-40af-9a47-9cc13798345e # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: LogOriginalXGBoostRegressorModel_ModelRegistry
    config:
      source: |-
        # Get sample input data to pass into the registry logging function
        X = train_df.select(FEATURE_COLUMN_NAMES).limit(100)

        # Define model name
        model_name = "SHIFT_SALES_PREDICTION"

        # Let's first log the very first model we trained
        model_ver = native_registry.log_model(
            model_name=model_name,
            version_name='V0',
            model=regressor,
            sample_input_data=X, # to provide the feature schema
        )
  - cellType: CODE
    cellId: 535d2526-7952-4732-a7a1-ca61c9af276d # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: LogGridSearchOptimalModel_ModelRegistry
    config:
      source: |-
        # Now, let's log the optimal model from GridSearchCV
        model_ver2 = native_registry.log_model(
            model_name=model_name,
            version_name='V2',
            model=optimal_model,
            sample_input_data=X, # to provide the feature schema
        )

        # Add evaluation metric
        model_ver2.set_metric(metric_name="mean_abs_pct_err", value=optimal_mape)

        # Add a description
        model_ver2.comment = "This is the second iteration of the Shift Sales Price Prediction model \
                                where we performed hyperparameter optimization."
  - cellType: CODE
    cellId: 2228419b-877f-4459-88f4-e47e7875fd35 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: ShowModels_ModelRegistry
    config:
      source: |-
        # Let's confirm model(s) that were added
        native_registry.get_model(model_name).show_versions()
  - cellType: CODE
    cellId: 9308ceee-bfec-417c-b374-ba15612429a7 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: ShowDefaultModel
    config:
      source: |-
        # We can see what the default model is when we have multiple versions with the same model name:
        native_registry.get_model(model_name).default.version_name
  - cellType: CODE
    cellId: 97762be3-ebd5-40c4-a020-1754ff4d0415 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: DefineDefaultModel
    config:
      source: |-
        # Now we can use the default version model to perform inference.
        model_ver = native_registry.get_model(model_name).version('V0')
        result_sdf = model_ver.run(test_df, function_name="predict")
        result_sdf.show()
  - cellType: TEXT
    cellId: f9adb0bf-4346-41ad-9500-90df7659961c # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - text: Now that our model is built and deployed, let's see it in action! We will find the best place to park in Vancouver for tomorrow morning's shift.
  - cellType: CODE
    cellId: 98aededf-0596-458e-a945-f386515825a0 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: GetVancouverShiftSales
    config:
      source: |-
        date_tomorrow_df = oe_df.filter(
            (F.col("shift_sales").isNull())
            & (F.col("shift_oe") == 1)
            & (F.col("city") == "Vancouver")
        )
        date_tomorrow_df.show()
  - cellType: CODE
    cellId: 841e2d3a-d2a5-4e49-a6c1-65255ab61b44 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: PredictVancouverShiftSales
    config:
      source: |-
        result_sdf = regressor.predict(date_tomorrow_df)
        result_sdf.show()
  - cellType: TEXT
    cellId: 4c570c7a-5cd3-4100-b52b-9e1092bdb114 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - text: ""
            - src: /api/v1/file/be530fc6-609c-46f7-a2ee-83ebb0d35258
              type: image
              width: 600
              children:
                - text: ""
            - text: ""
  - cellType: TEXT
    cellId: db7c3053-47d6-4e00-a2cb-c0ae02ae613a # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h2
          children:
            - text: Visualize on a Map
        - type: p
          children:
            - text: "The red and yellow areas indicate higher predicted sales locations and the green zones indicate lower predicted sales. We will use this insight to ensure that our drivers are parking at the high-value locations. Value: Updated predictions readily available to drive towards our corporate goals."
  - cellType: MAP
    cellId: d3f5ffd9-17cc-4a51-b679-86a50bc36d82 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      height: 520
      map:
        theme: hex
        layers:
          - id: 62c8d4b9-386c-4191-9933-e2c05efae456
            data:
              coordinates:
                system: latlng_separate
                dataFrameLatColumn: LATITUDE
                dataFrameLngColumn: LONGITUDE
              dataFrameName: result_sdf
            fill:
              type: dynamic
              colors:
                - - 41
                  - 160
                  - 124
                - - 255
                  - 255
                  - 255
              dataFrameColumn: PRED_SHIFT_SALES
            type: scatter
            radius:
              type: static
              value: 20
            opacity: 0.6
            visible: true
            tooltipDataFrameColumns: []
  - cellType: TEXT
    cellId: f6ff2768-e63f-4fb4-b640-203b92c70aff # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h1
          children:
            - text: Part 5 - Create a SiS application to use predicted outputs
        - type: p
          children:
            - text: ""
            - src: /api/v1/file/79d8fe65-1957-4711-ba85-a97fb643d244
              type: image
              width: 600
              children:
                - text: ""
            - text: ""
        - type: p
          children:
            - text: "Create a SiS application for local managers to identify where to place daily food trucks. "
  - cellType: TEXT
    cellId: c166aa1b-2add-4995-b43a-85d2f180841f # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h3
          children:
            - text: "Create new SiS app. "
        - type: h3
          children:
            - text: Replace existing code with SiS_application.py code listed below.
        - type: h3
          children:
            - text: "Update database in lines 41, 66, and 124. "
        - type: h3
          children:
            - text: "Include required pydeck and snowflake-ml-python package. "
        - type: h3
          children:
            - text: Run the SiS application.
  - cellType: TEXT
    cellId: 2b0fb73c-3ebf-40ef-ad95-7feee25b9df1 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - text: ""
            - src: /api/v1/file/8b917fcf-e8de-479f-ba87-72afcdd69a47
              type: image
              width: 600
              children:
                - text: ""
            - text: ""
  - cellType: TEXT
    cellId: a62cc3fb-0a63-4929-946e-8bc6fd18558f # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - text: "# Import Python packages"
        - type: paragraph
          children:
            - text: import streamlit as st
        - type: paragraph
          children:
            - text: import pydeck as pdk
        - type: paragraph
          children:
            - text: import numpy as np
        - type: paragraph
          children:
            - text: ""
        - type: paragraph
          children:
            - text: ""
        - type: paragraph
          children:
            - text: "# Import Snowflake modules"
        - type: paragraph
          children:
            - text: from snowflake.snowpark import Session
        - type: paragraph
          children:
            - text: import snowflake.snowpark.functions as F
        - type: paragraph
          children:
            - text: from snowflake.snowpark import Window
        - type: paragraph
          children:
            - text: from snowflake.snowpark.context import get_active_session
        - type: paragraph
          children:
            - text: from snowflake.ml.registry import Registry
        - type: paragraph
          children:
            - text: import snowflake.ml.modeling.preprocessing as snowmlpp
        - type: paragraph
          children:
            - text: ""
        - type: paragraph
          children:
            - text: ""
        - type: paragraph
          children:
            - text: "# Set Streamlit page config"
        - type: paragraph
          children:
            - text: st.set_page_config(
        - type: paragraph
          children:
            - text: '    page_title="Streamlit App: Snowpark 101", '
        - type: paragraph
          children:
            - text: '    page_icon=":truck:",'
        - type: paragraph
          children:
            - text: '    layout="wide",'
        - type: paragraph
          children:
            - text: )
        - type: paragraph
          children:
            - text: ""
        - type: paragraph
          children:
            - text: ""
        - type: paragraph
          children:
            - text: "# Add header and a subheader"
        - type: paragraph
          children:
            - text: st.header("Predicted Shift Sales by Location")
        - type: paragraph
          children:
            - text: st.subheader("Data-driven recommendations for food truck drivers.")
        - type: paragraph
          children:
            - text: " "
        - type: paragraph
          children:
            - text: ""
        - type: paragraph
          children:
            - text: ""
        - type: paragraph
          children:
            - text: "# Connect to Snowflake"
        - type: paragraph
          children:
            - text: "# session = init_connection()"
        - type: paragraph
          children:
            - text: session = get_active_session()
        - type: paragraph
          children:
            - text: " "
        - type: paragraph
          children:
            - text: "# Create input widgets for cities and shift"
        - type: paragraph
          children:
            - text: "with st.container():"
        - type: paragraph
          children:
            - text: "    col1, col2 = st.columns(2)"
        - type: paragraph
          children:
            - text: "    with col1:"
        - type: paragraph
          children:
            - text: "        # Drop down to select city"
        - type: paragraph
          children:
            - text: "        city = st.selectbox("
        - type: paragraph
          children:
            - text: '            "City:",'
        - type: paragraph
          children:
            - text: '            session.table("HOL.SCHEMA0.SHIFT_SALES_V")'
        - type: paragraph
          children:
            - text: '            .select("city")'
        - type: paragraph
          children:
            - text: "            .distinct()"
        - type: paragraph
          children:
            - text: '            .sort("city"),'
        - type: paragraph
          children:
            - text: "        )"
        - type: paragraph
          children:
            - text: " "
        - type: paragraph
          children:
            - text: "    with col2:"
        - type: paragraph
          children:
            - text: "        # Select AM/PM Shift"
        - type: paragraph
          children:
            - text: '        shift = st.radio("Shift:", ("AM", "PM"), horizontal=True)'
        - type: paragraph
          children:
            - text: ""
        - type: paragraph
          children:
            - text: ""
        - type: paragraph
          children:
            - text: "    n_trucks = st.selectbox('How many food trucks would you like to schedule today?', np.arange(1,10))"
        - type: paragraph
          children:
            - text: ""
        - type: paragraph
          children:
            - text: ""
        - type: paragraph
          children:
            - text: "    if n_trucks > 1:"
        - type: paragraph
          children:
            - text: "        range = st.slider('What is the minimum distance in kilometers between food trucks?', 0, 20, 1)"
        - type: paragraph
          children:
            - text: "        st.write('You are requesting a minimum distance of ', range, 'km')"
        - type: paragraph
          children:
            - text: "        st.write('Click **:blue[Update]** to get the ', n_trucks, ' highest predicted Shift_Sales food truck locations.')"
        - type: paragraph
          children:
            - text: "    else:"
        - type: paragraph
          children:
            - text: "        st.write('Click **:blue[Update]** to get one food truck location predicted to have the Shift_Sales')"
        - type: paragraph
          children:
            - text: "        "
        - type: paragraph
          children:
            - text: "# Get predictions for city and shift time"
        - type: paragraph
          children:
            - text: "def get_predictions(city, shift):"
        - type: paragraph
          children:
            - text: "    # Get data and filter by city and shift"
        - type: paragraph
          children:
            - text: "    snowpark_df = session.table("
        - type: paragraph
          children:
            - text: '        "HOL.SCHEMA0.SHIFT_SALES_V"'
        - type: paragraph
          children:
            - text: '    ).filter((F.col("shift") == shift) & (F.col("city") == city))'
        - type: paragraph
          children:
            - text: " "
        - type: paragraph
          children:
            - text: "    # Get rolling average"
        - type: paragraph
          children:
            - text: "    window_by_location_all_days = ("
        - type: paragraph
          children:
            - text: '        Window.partition_by("location_id")'
        - type: paragraph
          children:
            - text: '        .order_by("date")'
        - type: paragraph
          children:
            - text: "        .rows_between(Window.UNBOUNDED_PRECEDING, Window.CURRENT_ROW - 1)"
        - type: paragraph
          children:
            - text: "    )"
        - type: paragraph
          children:
            - text: " "
        - type: paragraph
          children:
            - text: "    snowpark_df = snowpark_df.with_column("
        - type: paragraph
          children:
            - text: '        "avg_location_shift_sales",'
        - type: paragraph
          children:
            - text: '        F.avg("shift_sales").over(window_by_location_all_days),'
        - type: paragraph
          children:
            - text: "    ).cache_result()"
        - type: paragraph
          children:
            - text: " "
        - type: paragraph
          children:
            - text: "    # Get tomorrow's date"
        - type: paragraph
          children:
            - text: "    date_tomorrow = ("
        - type: paragraph
          children:
            - text: '        snowpark_df.filter(F.col("shift_sales").is_null())'
        - type: paragraph
          children:
            - text: '        .select(F.min("date"))'
        - type: paragraph
          children:
            - text: "        .collect()[0][0]"
        - type: paragraph
          children:
            - text: "    )"
        - type: paragraph
          children:
            - text: " "
        - type: paragraph
          children:
            - text: "    # Filter to tomorrow's date"
        - type: paragraph
          children:
            - text: '    snowpark_df = snowpark_df.filter(F.col("date") == date_tomorrow)'
        - type: paragraph
          children:
            - text: " "
        - type: paragraph
          children:
            - text: "    # Impute"
        - type: paragraph
          children:
            - text: '    snowpark_df = snowpark_df.fillna(value=0, subset=["avg_location_shift_sales"])'
        - type: paragraph
          children:
            - text: ""
        - type: paragraph
          children:
            - text: ""
        - type: paragraph
          children:
            - text: "    for colname in snowpark_df.columns:"
        - type: paragraph
          children:
            - text: "        new_colname = str.upper(colname)"
        - type: paragraph
          children:
            - text: "        snowpark_df = snowpark_df.with_column_renamed(colname, new_colname)"
        - type: paragraph
          children:
            - text: " "
        - type: paragraph
          children:
            - text: "    # Encode"
        - type: paragraph
          children:
            - text: '    snowpark_df = snowpark_df.with_column("shift_oe", F.iff(F.col("shift") == "AM", 0, 1))\'
        - type: paragraph
          children:
            - text: '                             .with_column("shift_oe", F.iff(F.col("shift") == "PM", 1, 0))'
        - type: paragraph
          children:
            - text: ""
        - type: paragraph
          children:
            - text: "    # Scale"
        - type: paragraph
          children:
            - text: '    mm_target_columns = ["CITY_POPULATION"]'
        - type: paragraph
          children:
            - text: '    mm_target_cols_out = ["CITY_POPULATION_NORM"]'
        - type: paragraph
          children:
            - text: "    snowml_mms = snowmlpp.MinMaxScaler(input_cols=mm_target_columns, "
        - type: paragraph
          children:
            - text: "                                       output_cols=mm_target_cols_out)"
        - type: paragraph
          children:
            - text: "    snowml_mms.fit(snowpark_df)"
        - type: paragraph
          children:
            - text: "    snowpark_df = snowml_mms.transform(snowpark_df)"
        - type: paragraph
          children:
            - text: "    "
        - type: paragraph
          children:
            - text: "    # Get all features"
        - type: paragraph
          children:
            - text: '    feature_cols = ["SHIFT_OE", '
        - type: paragraph
          children:
            - text: '                    "CITY_POPULATION_NORM", '
        - type: paragraph
          children:
            - text: '                    "MONTH", '
        - type: paragraph
          children:
            - text: '                    "DAY_OF_WEEK",'
        - type: paragraph
          children:
            - text: '                    "LATITUDE",'
        - type: paragraph
          children:
            - text: '                    "LONGITUDE",'
        - type: paragraph
          children:
            - text: '                    "AVG_LOCATION_SHIFT_SALES",'
        - type: paragraph
          children:
            - text: '                    "LOCATION_ID"]'
        - type: paragraph
          children:
            - text: ""
        - type: paragraph
          children:
            - text: ""
        - type: paragraph
          children:
            - text: "    snowpark_df = snowpark_df.select(feature_cols)"
        - type: paragraph
          children:
            - text: ""
        - type: paragraph
          children:
            - text: '    native_registry = Registry(session=session, database_name="HOL", schema_name="SCHEMA0")'
        - type: paragraph
          children:
            - text: "    model_ver = native_registry.get_model(\"SHIFT_SALES_PREDICTION\").version('v0')"
        - type: paragraph
          children:
            - text: '    result_sdf = model_ver.run(snowpark_df, function_name="predict")'
        - type: paragraph
          children:
            - text: "    return result_sdf"
        - type: paragraph
          children:
            - text: ""
        - type: paragraph
          children:
            - text: '# Update predictions and plot when the "Update" button is clicked'
        - type: paragraph
          children:
            - text: 'if st.button(":blue[Update]"):'
        - type: paragraph
          children:
            - text: "    # Get predictions"
        - type: paragraph
          children:
            - text: '    with st.spinner("Getting predictions..."):'
        - type: paragraph
          children:
            - text: "        predictions_sdf = get_predictions(city, shift)"
        - type: paragraph
          children:
            - text: "        predictions = predictions_sdf.to_pandas()"
        - type: paragraph
          children:
            - text: " "
        - type: paragraph
          children:
            - text: "    # Plot on a map"
        - type: paragraph
          children:
            - text: '    st.subheader("Predicted Shift Sales for position")'
        - type: paragraph
          children:
            - text: '    predictions["PRED_SHIFT_SALES"].clip(0, inplace=True)'
        - type: paragraph
          children:
            - text: "    st.pydeck_chart("
        - type: paragraph
          children:
            - text: "        pdk.Deck("
        - type: paragraph
          children:
            - text: "            map_style=None,"
        - type: paragraph
          children:
            - text: "            initial_view_state=pdk.ViewState("
        - type: paragraph
          children:
            - text: '                latitude=predictions["LATITUDE"][0],'
        - type: paragraph
          children:
            - text: '                longitude=predictions["LONGITUDE"][0],'
        - type: paragraph
          children:
            - text: "                zoom=11,"
        - type: paragraph
          children:
            - text: "                pitch=50,"
        - type: paragraph
          children:
            - text: "            ),"
        - type: paragraph
          children:
            - text: "            layers=["
        - type: paragraph
          children:
            - text: "                pdk.Layer("
        - type: paragraph
          children:
            - text: '                    "HexagonLayer",'
        - type: paragraph
          children:
            - text: "                    data=predictions,"
        - type: paragraph
          children:
            - text: '                    get_position="[LONGITUDE, LATITUDE]",'
        - type: paragraph
          children:
            - text: "                    radius=200,"
        - type: paragraph
          children:
            - text: "                    elevation_scale=4,"
        - type: paragraph
          children:
            - text: "                    elevation_range=[0, 1000],"
        - type: paragraph
          children:
            - text: "                    pickable=True,"
        - type: paragraph
          children:
            - text: "                    extruded=True,"
        - type: paragraph
          children:
            - text: "                ),"
        - type: paragraph
          children:
            - text: "                pdk.Layer("
        - type: paragraph
          children:
            - text: '                    "ScatterplotLayer",'
        - type: paragraph
          children:
            - text: "                    data=predictions,"
        - type: paragraph
          children:
            - text: '                    get_position="[LONGITUDE, LATITUDE]",'
        - type: paragraph
          children:
            - text: '                    get_color="[200, 30, 0, 160]",'
        - type: paragraph
          children:
            - text: "                    get_radius=200,"
        - type: paragraph
          children:
            - text: "                ),"
        - type: paragraph
          children:
            - text: "            ],"
        - type: paragraph
          children:
            - text: "        )"
        - type: paragraph
          children:
            - text: "    )"
        - type: paragraph
          children:
            - text: "    "
        - type: paragraph
          children:
            - text: '    max_x = predictions.loc[predictions["PRED_SHIFT_SALES"].idxmax()]'
        - type: paragraph
          children:
            - text: '    st.write("Maximum Predicted Sales are expected at the following location:", max_x)'
        - type: paragraph
          children:
            - text: "    #st.dataframe(predictions_sdf)"
        - type: paragraph
          children:
            - text: "    "
        - type: paragraph
          children:
            - text: '    location_id = max_x["LOCATION_ID"]'
        - type: paragraph
          children:
            - text: '    lat = max_x["LATITUDE"]'
        - type: paragraph
          children:
            - text: '    long = max_x["LONGITUDE"]'
        - type: paragraph
          children:
            - text: ""
        - type: paragraph
          children:
            - text: '    st.subheader("The following chart is generated using the st_point and st_distance Snowflake Geospatial features")'
        - type: paragraph
          children:
            - text: ""
        - type: paragraph
          children:
            - text: "    if n_trucks == 1:"
        - type: paragraph
          children:
            - text: '        st.write("Have your only food truck positioned at Location ID ", location_id, " to maximize SHIFT_SALES")'
        - type: paragraph
          children:
            - text: "    elif n_trucks > 1:"
        - type: paragraph
          children:
            - text: "        best_locations = [location_id]"
        - type: paragraph
          children:
            - text: "        available_locations_sdf = predictions_sdf"
        - type: paragraph
          children:
            - text: "    "
        - type: paragraph
          children:
            - text: "        st_distance = F.function('st_distance')"
        - type: paragraph
          children:
            - text: "        st_point = F.function('st_point')"
        - type: paragraph
          children:
            - text: "    "
        - type: paragraph
          children:
            - text: "        for truck_n in np.arange(0,n_trucks - 1):"
        - type: paragraph
          children:
            - text: '            available_locations_sdf = available_locations_sdf.with_column("DISTANCE_TO_TRUCK", '
        - type: paragraph
          children:
            - text: "                                        st_distance("
        - type: paragraph
          children:
            - text: "                                            st_point(F.lit(float(long)), F.lit(float(lat))),"
        - type: paragraph
          children:
            - text: '                                            st_point(F.col("LONGITUDE"), F.col("LATITUDE"))'
        - type: paragraph
          children:
            - text: "                                        )/1609"
        - type: paragraph
          children:
            - text: '                                       ).filter(F.col("DISTANCE_TO_TRUCK") >= range/1.609).order_by("PRED_SHIFT_SALES", ascending=False)'
        - type: paragraph
          children:
            - text: "            max_x = available_locations_sdf.limit(1).to_pandas()"
        - type: paragraph
          children:
            - text: "            try:"
        - type: paragraph
          children:
            - text: '                location_id = max_x["LOCATION_ID"].iloc[0]'
        - type: paragraph
          children:
            - text: '                lat = max_x["LATITUDE"].iloc[0]'
        - type: paragraph
          children:
            - text: '                long = max_x["LONGITUDE"].iloc[0]'
        - type: paragraph
          children:
            - text: "            except:"
        - type: paragraph
          children:
            - text: "                break"
        - type: paragraph
          children:
            - text: "            best_locations.append(location_id)"
        - type: paragraph
          children:
            - text: ""
        - type: paragraph
          children:
            - text: ""
        - type: paragraph
          children:
            - text: '        selected_locations = predictions[predictions["LOCATION_ID"].isin(best_locations)]'
        - type: paragraph
          children:
            - text: "        st.map(selected_locations)"
        - type: paragraph
          children:
            - text: "        st.dataframe(selected_locations)"
appLayout:
  visibleMetadataFields:
    - NAME
    - DESCRIPTION
    - AUTHOR
    - LAST_EDITED
    - LAST_RUN
    - CATEGORIES
    - STATUS
    - TABLE_OF_CONTENTS
  fullWidth: false
  tabs:
    - name: Overview
      rows:
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 32484465-4559-4943-84ef-132703c3ffb6
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 87fe90a5-7dfd-4c11-a9a8-523585b7bb54
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 9f5e716c-668f-4236-84f4-93cb8bf5286e
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 65a763bd-dfef-4779-9742-cbff770c3f57
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 0433f079-da01-469a-9a13-b1780ddf1cf8
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: f700914e-141c-489b-a45a-b3407ee6184d
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: ad14607d-ee33-4369-b8a0-f599c4c0c21d
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 4c272555-8df9-47b4-b137-bbd0a942a36d
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: f7a060e7-05fe-4710-b20b-01c2692f4413
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 33433393-02b4-4035-88c5-a00d6347da7a
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: c9eb4a3b-d4cb-46c2-8d24-9d1a1d84057e
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 2b8909f6-c2ce-4787-a1bf-c7f919f0449c
                  sharedFilterId: null
                  height: null
                  showLabel: true
    - name: Part 1
      rows:
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 62cfb800-c3a7-4400-980e-cbe9f6b6af50
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: b6dc160c-91d1-449a-9ec7-aed3737a76b2
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 7f39d1f1-9b57-41a1-aa17-064d6bcf5413
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 554982c3-27aa-44b1-b3bd-672dbd0a4538
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: e6964528-0f5b-4a9a-81d0-b10b21def5bc
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: f8f16bd7-cb34-49b1-ad81-e30b89ec1624
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 2bdc06ed-7597-46c2-9d4e-73bf9308925d
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: acbba928-3d5f-499a-b1de-237b9b66cb67
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 063d74ed-901b-4a66-b138-b6a2dc446164
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: e5ef0cb6-b113-4660-9d4f-000c6938c385
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: c7e5baae-4105-407f-affa-06cd9b45e966
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: b16b5750-a53b-4ce0-bbcf-714de7b15a9e
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 4f360737-0d14-48c1-b4c3-543a310fc880
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 8b611e32-c6df-4867-8517-c1eea407836b
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: c016ab39-5eeb-4b7a-9597-4b0e32895a0b
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 197e79fe-79fc-4239-822f-0d17670f23fe
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: a55d5a39-cf07-4b97-ac67-3ece994451d6
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 2b26b690-4711-4c6f-8dec-54f801dc7887
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 3cb188e6-34d7-492b-aea6-c80381c361ef
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 7a9f7c31-3e6f-4727-bf4b-9a8d09988d0b
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: d190202d-1ed1-4235-9d20-0d04b232c5a4
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 096af97e-249a-4f79-998c-60086753f099
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 254b0eb9-99ec-4727-860c-6124416de986
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: f4fe063f-4f73-4c93-a852-36eddd67dac3
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 13a5b103-47f9-42d7-b0a1-ed1d4cc16b19
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: b2c8fa4d-b5c3-4c00-8519-7b3b9de4ee69
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: e06e1b75-9b6e-453c-9c44-bd12579aa748
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: d0f630ce-77ea-4889-bb0c-c779f6234016
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 1d598efd-8cd6-41d8-8dc1-b07eaa23042d
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 243a185f-d1ce-45f1-9075-6cf7ef315158
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 87c0c76c-cca1-4a00-9a88-4ca1eba1fe34
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 52d691f3-7f9c-483e-abcd-ed9285fe9ee0
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 1fa14dbd-ebfc-40f5-bcba-0cfc3ae7d540
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: b222fc6a-4107-48d6-9ceb-de4ed193e260
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: ca8afd5e-9b51-4f85-84c1-eff0c24c06dd
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: f7ab1686-1230-4f6b-bbf9-68a8c03b0021
                  sharedFilterId: null
                  height: null
                  showLabel: true
    - name: Part 2
      rows:
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 8c0b7984-88d4-47a7-97ab-332d5c9825d1
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: e92656a3-5c79-43ca-a814-3c762e79c553
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 9ce72e2c-c328-46b0-bc28-5747b59492ef
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 14115d95-15c0-48c8-9907-918954509a63
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: e100a021-682b-46c0-93fc-3d6380ed64b2
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: f9885f5d-b3b5-4767-a0d5-2f0ca2931b17
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 2908ed1f-9b1b-4065-a130-a0f7fc71258a
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: a9ffbd81-012a-4059-94fb-f6f92dc39417
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: e6140058-0369-480b-81c4-0b12cafb5408
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 3dc42061-e76a-4500-b3e6-76b07586df69
                  sharedFilterId: null
                  height: null
                  showLabel: true
    - name: Part 3
      rows:
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 3d9cfd7a-f374-42b1-b146-46a48e6a4467
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: e4cafd35-30e0-4185-96f3-32905fd5e8e0
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 9d0f622b-c14e-435a-ac7b-476bab0a267a
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: c7af022f-2de8-444f-b2d6-6ce218e0516d
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: d6685956-f4c6-4565-85a6-6e6c55f8879a
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 1cfb6932-eda8-49d2-9e4c-ee04b3c4b4a5
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 8d40ebc3-610f-4fab-9978-155d97e63c8d
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 9b8cc453-dafa-4b58-aa30-ca5cf6b70f93
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 64c2ba50-fda3-403b-90ba-217d27786b5c
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: ca933ade-cc4c-45ce-a271-1d0e69ee1871
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: ae4cab6c-ab64-407f-9ce3-249d3a989bd5
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: e307c1a0-796b-4d4d-a15e-13c7a308912c
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 31b7be81-3792-4c4a-b483-1feee5aad6a1
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: e0569d84-a479-47e1-93ff-55ec829f974a
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 44297461-f97c-4da2-a9cf-686bfc09ef3b
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 4bf87cb5-5cd9-42ce-829b-647c72586d03
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 6973eccc-5d7f-4555-9575-3a209afce64d
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 110b79a5-cbf8-459d-b133-7598e9767a49
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: be9289fd-ce1b-43c8-be03-f6d81565b592
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: fdcd660b-c535-486d-b622-39d32011a000
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 9df964f3-812c-4c2e-b114-546b3462b3d2
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 9412fbc7-a3b3-4a39-a435-bbab7978cf09
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: e3cebeed-4a79-4314-a761-2095fc0b78ef
                  sharedFilterId: null
                  height: null
                  showLabel: true
    - name: Part 4
      rows:
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 39f5d778-8d2c-4975-addb-75583754bdf0
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 6939a130-983a-4a4c-aa71-c95c1800bc53
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 1afb8642-5020-4338-8337-0bb9555b1616
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 14697777-bdb5-442a-b03e-c8609f987109
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: fdbb7f52-8762-4108-8ded-65d1bf8b209b
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 2e9445a2-4f79-40af-9a47-9cc13798345e
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 535d2526-7952-4732-a7a1-ca61c9af276d
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 2228419b-877f-4459-88f4-e47e7875fd35
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 97762be3-ebd5-40c4-a020-1754ff4d0415
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 98aededf-0596-458e-a945-f386515825a0
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: 841e2d3a-d2a5-4e49-a6c1-65255ab61b44
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: d3f5ffd9-17cc-4a51-b679-86a50bc36d82
                  sharedFilterId: null
                  height: null
                  showLabel: true
    - name: Part 5
      rows:
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: f6ff2768-e63f-4fb4-b640-203b92c70aff
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: c166aa1b-2add-4995-b43a-85d2f180841f
                  sharedFilterId: null
                  height: null
                  showLabel: true
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: a62cc3fb-0a63-4929-946e-8bc6fd18558f
                  sharedFilterId: null
                  height: null
                  showLabel: true
sharedFilters: []
